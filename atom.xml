<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Elliot</title>
  
  
  <link href="https://www.baidu.com/atom.xml" rel="self"/>
  
  <link href="https://www.baidu.com/"/>
  <updated>2020-09-16T12:16:56.747Z</updated>
  <id>https://www.baidu.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>复习杂记二</title>
    <link href="https://www.baidu.com/2020/09/16/%E5%A4%8D%E4%B9%A0%E6%9D%82%E8%AE%B02/"/>
    <id>https://www.baidu.com/2020/09/16/%E5%A4%8D%E4%B9%A0%E6%9D%82%E8%AE%B02/</id>
    <published>2020-09-16T07:14:49.518Z</published>
    <updated>2020-09-16T12:16:56.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="处理机管理"><a href="#处理机管理" class="headerlink" title="处理机管理"></a>处理机管理</h1><h2 id="1-进程与程序"><a href="#1-进程与程序" class="headerlink" title="1.进程与程序"></a>1.进程与程序</h2><a id="more"></a><blockquote><p>进程：动态。身份：PID。实体：PCB。<br>程序：静态<br>linux：task struct（PCB）<br>source code -&gt; exe（指令序列）-&gt;载入内存，建立PCB，数据段<br>进程实体，进程映像（日常讨论的进程）eg. 进程调度<br>进程 ：获得资源的基本单位</p></blockquote><h2 id="2-进程状态的转换"><a href="#2-进程状态的转换" class="headerlink" title="2.进程状态的转换"></a>2.进程状态的转换</h2><blockquote><p>创建态–(分配志愿)–&gt;就绪态–(处理机到达)–&gt;运行态<br>运行态–(等待某个资源)–&gt;阻塞态<br>阻塞态–(资源到达)–&gt;就绪态<br>运行态–(exit)–&gt;中止态<br>运行态–(致命错误)–&gt;终止态<br>运行态–(时钟中断)–&gt;中止态<br>单核cpu只有一个cpu处于运行态<br>多核cpu可以多个进程同时处于运行态</p></blockquote><h2 id="3-进程的组织"><a href="#3-进程的组织" class="headerlink" title="3.进程的组织"></a>3.进程的组织</h2><ul><li><p>链式方式</p><blockquote><p>执行指针<br>  就绪队列指针<br>阻塞对列指针队列（可分为多个）</p></blockquote></li><li><p>索引方式</p></li></ul><h2 id="4-进程控制"><a href="#4-进程控制" class="headerlink" title="4.进程控制"></a>4.进程控制</h2><p>实现进程状态的转换 (via.原语(中间不可中断))</p><blockquote><p>( 1 ) PCB变量改变<br>( 2 ) 改变队列 </p></blockquote><p>如若不能一气呵成，则可能损坏进程数据结构。<br>原语: 利用关中断，和开中断这两个 <strong>特权指令</strong>  来实现。</p><ul><li>创建原语<blockquote><p>用户登录<br>作业调度(外存里的程序)<br>提供服务<br> 应用请求</p></blockquote></li><li>撤销原语<blockquote><p>正常结束<br>   异常结束<br>   外界干预</p></blockquote></li><li>阻塞原语<blockquote><p>等待系统分配资源<br>等待合作进程完成工作</p></blockquote></li><li>唤醒原语<blockquote><p>等待的事情发生</p></blockquote></li><li>切换原语<blockquote><p>当前时间片到<br>  更高优先级级程序到<br>  当前程序主动阻塞<br>  进程终止</p></blockquote>进程运行现场<blockquote><p>处理机寄存器 : PSW , PC , IR etc.<br>在进程下处理机时 ,  将 <strong>必要寄存器信息</strong> 即 <strong>上下文</strong> 存入PCB(即保护现场)</p></blockquote></li></ul><h2 id="5-进程通信"><a href="#5-进程通信" class="headerlink" title="5.进程通信"></a>5.进程通信</h2><p>what : 进程间的信息交换( 不同进程内存位置的信息交换 )  </p><ul><li>共享存储<blockquote><p>互斥访问 PV操作<br>  基于数据结构共享<br>  基于存储区的共享</p></blockquote></li><li>管道通信 <blockquote><p>半双工通信<br> 在内存大小固定的缓冲区,  通常为页面大小<br> 要双向同时通信  ,  需要两管道<br> 必须写满才能读<br> 必须读完才能写<br> 读完数据将会被抛弃  ,  所以读进程至多一个</p></blockquote></li><li>消息传递<blockquote><p>格式化消息<br>   进程有消息缓冲队列<br>   网络中的报文<br>   操作系统为进程提供 发送消息/接收消息<br>   直接通信<br>   间接通信 (邮件)</p></blockquote><h2 id="6-线程的特点与概念"><a href="#6-线程的特点与概念" class="headerlink" title="6.线程的特点与概念"></a>6.线程的特点与概念</h2>为什么引入进程?<br>例如QQ的几个功能分成几个进程  ,  那么这几个进程  ,  要共享资源   ,  而且切换进程开销大  ( 更换块表,更换缓存 )  .<br>为了解决上述问题  ,  引入线程.</li></ul><blockquote><p>线程们可共享使用进程资源.<br>切换更加轻量化.<br>进程通信必须要有操作系统介入  ,  开销巨大.<br>多核CPU环境下  ,  各线程分派到不同CPU下工作.<br>线程资源 TCB  ,  寄存器信息  ,  堆栈信息</p></blockquote><h2 id="7-多线程模型"><a href="#7-多线程模型" class="headerlink" title="7.多线程模型"></a>7.多线程模型</h2><ul><li><p>用户级线程(UTL)</p><blockquote><p>线程库(while与if实现)<br>  代码逻辑的载体<br>  此时操作系统只看得见进程  ,  此时是个逻辑线程.<br>  线程由线程库管理<br>  线程库不需要切换用户态<br>  线程并发度不高</p></blockquote></li><li><p>内核级线程(操作系统层面的线程)</p><blockquote><p>操作系统管理线程工作<br>  运行分配的载体<br>  线程切换需要处理机变态<br>  线程成为调度的基本单位<br>  线程管理成本变高</p></blockquote></li><li><p>组合方式</p><blockquote><p>用户级线程 : 内核级线程<br>  1  :  1  管理成本高<br>  n  :  1  并发度低  ,  管理成本低<br>  1  :  n  并发度搞  ,  管理成本较高</p></blockquote><blockquote></blockquote><h2 id="8-处理机调度"><a href="#8-处理机调度" class="headerlink" title="8.处理机调度"></a>8.处理机调度</h2><p>调度的基本概念 : 银行服务客户 , 厕所使用分配<br>处理机调度 : 处理机服务进程  </p></li><li><p>高级调度(作业调度)</p><blockquote><p>外存与内存之间的调度<br>  外存后备队列<br>  无-&gt;创建态-&gt;就绪态</p></blockquote></li><li><p>中级调度</p><blockquote><p>前提 : 虚拟化技术<br>  暂时不能运行的进程调入外存  ,  然后中级调度重新调入内存<br>  调入外存的成为挂起状态<br>  PCB不会被调入外存<br>  就绪挂起  ,  阻塞挂起<br>  五状态-&gt;七状态<br>  挂起态-&gt;就绪态</p></blockquote></li><li><p>低级调度</p><blockquote><p>处理机服务就绪进程<br>  频度高 几毫秒一次<br>  最基本  </p></blockquote><blockquote></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;处理机管理&quot;&gt;&lt;a href=&quot;#处理机管理&quot; class=&quot;headerlink&quot; title=&quot;处理机管理&quot;&gt;&lt;/a&gt;处理机管理&lt;/h1&gt;&lt;h2 id=&quot;1-进程与程序&quot;&gt;&lt;a href=&quot;#1-进程与程序&quot; class=&quot;headerlink&quot; title=&quot;1.进程与程序&quot;&gt;&lt;/a&gt;1.进程与程序&lt;/h2&gt;</summary>
    
    
    
    
    <category term="操作系统" scheme="https://www.baidu.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>复习杂记一</title>
    <link href="https://www.baidu.com/2020/09/16/%E5%A4%8D%E4%B9%A0%E6%9D%82%E8%AE%B0/"/>
    <id>https://www.baidu.com/2020/09/16/%E5%A4%8D%E4%B9%A0%E6%9D%82%E8%AE%B0/</id>
    <published>2020-09-16T06:14:50.000Z</published>
    <updated>2020-09-16T12:17:03.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h1><a id="more"></a><ul><li>内核程序&amp;应用程序<blockquote><p>内核程序构成内核<br>  一个操作系统只要内核就够了（docker）<br>可执行特权指令（操作系统管理者内核执行）</p></blockquote></li><li>内核态（目态）&amp;用户态（管态）<blockquote><p>cpu现在运行什么程序就是什么态<br>psw 0用户，1内核态</p></blockquote></li><li>内核态与用户态的转换<blockquote><p>执行修改psw标志位的指令<br>中断 用户-&gt;内核 操作系统的夺回特权</p></blockquote></li><li>中断与异常<blockquote><p>中断是操作系统内核夺回控制权的唯一途径<br>   无中断，做不到并发<br>   内中断： 恶意软件试图在用户态执行特权指令。指令参数非  法。陷入指令（非特权指令）。  故障。<br>   外中断 ：时钟中断（多道的基础）。I/O中断。<br>   根据中断信号的不同，有相应的中断处理程序（内核程序）。中断向量表。</p></blockquote><ul><li>系统调用<blockquote><p>应用程序程序员请求操作系统服务的途径<br>库函数使用了系统调用<br>系统调用比库函数底层<br>库函数暴露接口，不一定使用了系统调用<br>系统对共享资源统一管理，而应用程序只能发起系统调用来使用。eg. 访问任何共享资源，都要系统调用。<br>trap指令，访管指令</p></blockquote></li></ul></li><li>操作系统体系结构<blockquote><p>1.时钟管理。中断处理。原语<br>  2.进程管理。存储器管理。设备管理。（可以踢出内核）<br>  微内核 2 六次变态<br>  大内核 1,2 两次变态</p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;操作系统概述&quot;&gt;&lt;a href=&quot;#操作系统概述&quot; class=&quot;headerlink&quot; title=&quot;操作系统概述&quot;&gt;&lt;/a&gt;操作系统概述&lt;/h1&gt;</summary>
    
    
    
    
    <category term="操作系统" scheme="https://www.baidu.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>下论文</title>
    <link href="https://www.baidu.com/2020/09/14/%E4%B8%8B%E8%AE%BA%E6%96%87/"/>
    <id>https://www.baidu.com/2020/09/14/%E4%B8%8B%E8%AE%BA%E6%96%87/</id>
    <published>2020-09-14T04:43:20.000Z</published>
    <updated>2020-09-14T04:46:12.557Z</updated>
    
    <content type="html"><![CDATA[<p>下好了POPL和PLDI的往届论文，准备没事看看。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下好了POPL和PLDI的往届论文，准备没事看看。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="杂谈" scheme="https://www.baidu.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>无聊</title>
    <link href="https://www.baidu.com/2020/09/11/%E6%97%A0%E8%81%8A/"/>
    <id>https://www.baidu.com/2020/09/11/%E6%97%A0%E8%81%8A/</id>
    <published>2020-09-11T13:07:25.000Z</published>
    <updated>2020-09-11T13:08:29.443Z</updated>
    
    <content type="html"><![CDATA[<p>线性代数越学越多（头秃</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;线性代数越学越多（头秃&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="杂谈" scheme="https://www.baidu.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>meow meow meow</title>
    <link href="https://www.baidu.com/2020/09/06/meow-meow-meow/"/>
    <id>https://www.baidu.com/2020/09/06/meow-meow-meow/</id>
    <published>2020-09-06T15:09:25.000Z</published>
    <updated>2020-09-07T15:10:43.111Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
